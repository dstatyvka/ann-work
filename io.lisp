(in-package :number-one)

(defun add-ellipse (wand center-x center-y radius-x radius-y)
  (with-drawing-wand (dw)
    (with-pixel-wand (pw :comp (0 0 0 0))
      (draw-set-fill-color dw pw))
    (with-pixel-wand (pw :comp (0 0 0))
      (draw-set-stroke-color dw pw))
    (draw-ellipse dw center-x center-y radius-x radius-y 0.0d0 360.0d0)
    (magick-draw-image wand dw)))

(defun extract-valuable (wand )
  (let* ((iw (magick-get-image-width wand))
	 (ih (magick-get-image-height wand))
	 (count (* iw ih))
	 (result (make-array count :element-type 'double-float)))
    (with-foreign-object (pixels :double count)
      (magick-get-image-pixels wand 0 0 iw ih "I" :double pixels)
      (dotimes (i count result)
	(setf (aref result i) (mem-aref pixels :double i))))))

(defmacro do-intensities ((pixel-var  wand &key width-var height-var) &body body)
  (let ((width-var (or width-var (gensym)))
	(height-var (or height-var (gensym))))
    (with-gensyms (count pixels i)
      `(let* ((,width-var (magick-get-image-width ,wand))
	      (,height-var (magick-get-image-height ,wand))
	      (,count (* ,width-var ,height-var)))
	 (with-foreign-object (,pixels :double ,count)
	   (magick-get-image-pixels ,wand 0 0 ,width-var ,height-var "I" :double ,pixels)
	   (dotimes (,i ,count)
	     (let ((,pixel-var (mem-aref ,pixels :double ,i)))
	       ,@body)))))))

(defmacro with-source ((var pathname) &body body)
  `(with-magick-wand (,var :load ,pathname)
     (magick-set-image-colorspace ,var :gray)
     (magick-median-filter-image ,var 5d0)
     ,@body))
